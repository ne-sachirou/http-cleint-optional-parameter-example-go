// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// ExampleGetParams is parameters of GET /example operation.
type ExampleGetParams struct {
	Param1 int64
	Param2 OptInt64
}

func unpackExampleGetParams(packed middleware.Parameters) (params ExampleGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "param1",
			In:   "query",
		}
		params.Param1 = packed[key].(int64)
	}
	{
		key := middleware.ParameterKey{
			Name: "param2",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Param2 = v.(OptInt64)
		}
	}
	return params
}

func decodeExampleGetParams(args [0]string, argsEscaped bool, r *http.Request) (params ExampleGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: param1.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "param1",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.Param1 = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "param1",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: param2.
	{
		val := int64(42)
		params.Param2.SetTo(val)
	}
	// Decode query: param2.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "param2",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotParam2Val int64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt64(val)
					if err != nil {
						return err
					}

					paramsDotParam2Val = c
					return nil
				}(); err != nil {
					return err
				}
				params.Param2.SetTo(paramsDotParam2Val)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "param2",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
